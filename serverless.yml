service: hyuns-api
frameworkVersion: '2'

custom:
  env: ${file(./env/${opt:stage, 'dev'}.json)}
  customDomain:
    domainName: api.hyuns.dev
    basePath: ''
    stage: ${self:provider.stage}
    certificateName: 'api.hyuns.dev'

plugins:
  - serverless-domain-manager

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: 20211216
  region: ap-northeast-2
  stage: production
  environment:
    DB_CONNECT: ${self:custom.env.DB_CONNECT}
    MASTER_PASSWORD: ${self:custom.env.MASTER_PASSWORD}
    S3_ACCESS_KEY: ${self:custom.env.S3_ACCESS_KEY}
    S3_SECRET_KEY: ${self:custom.env.S3_SECRET_KEY}
    S3_REGION: ${self:custom.env.S3_REGION}
    S3_BUCKET: ${self:custom.env.S3_BUCKET}
    DISCORD_SERVER_MESSAGE_WEBHOOK: ${self:custom.env.DISCORD_SERVER_MESSAGE_WEBHOOK}

functions:
  helloWorld:
    handler: src/index.helloWorld
    events: 
      - http:
          cors: true
          path: /
          method: get

  authLogin:
    handler: src/auth.login
    events: 
      - http:
          cors: true
          path: auth/login
          method: post

  authCreateAccount:
    handler: src/auth.createAccount
    events: 
      - http:
          cors: true
          path: auth/account
          method: post

  authDeleteAccount:
    handler: src/auth.deleteAccount
    events: 
      - http:
          cors: true
          path: auth/account
          method: delete

  authPatchAccount:
    handler: src/auth.patchAccount
    events: 
      - http:
          cors: true
          path: auth/account
          method: patch

  serverCreate:
    handler: src/server.serverCreate
    events: 
      - http:
          cors: true
          path: server
          method: post

  serversInfo:
    handler: src/server.serversInfo
    events: 
      - http:
          cors: true
          path: server/info
          method: get

  serverInfo:
    handler: src/server.serverInfo
    events: 
      - http:
          cors: true
          path: server/info/{serverId}
          method: get

  serverPatch:
    handler: src/server.serverPatch
    events: 
      - http:
          cors: true
          path: server/{serverId}
          method: patch

  serverRemove:
    handler: src/server.serverRemove
    events: 
      - http:
          cors: true
          path: server/{serverId}
          method: delete

  serverSendMessage:
    handler: src/server.serverSendMessage
    events: 
      - http:
          cors: true
          path: message
          method: post

  serversMessageList:
    handler: src/server.serversMessageList
    events: 
      - http:
          cors: true
          path: message
          method: get

  serverMessageList:
    handler: src/server.serverMessageList
    events: 
      - http:
          cors: true
          path: message/{serverId}
          method: get

  serverMessageRemove:
    handler: src/server.serverMessageRemove
    events: 
      - http:
          cors: true
          path: message
          method: delete

  varCreate:
    handler: src/var.varCreate
    events: 
      - http:
          cors: true
          path: var/{isSecret}
          method: post

  varList:
    handler: src/var.varList
    events: 
      - http:
          cors: true
          path: var/{isSecret}
          method: get

  varListByGroup:
    handler: src/var.varListByGroup
    events: 
      - http:
          cors: true
          path: var/{isSecret}/${group}
          method: get

  varValue:
    handler: src/var.varValue
    events: 
      - http:
          cors: true
          path: var/{isSecret}/{group}/{key}
          method: get

  varRemove:
    handler: src/var.varRemove
    events: 
      - http:
          cors: true
          path: var/{isSecret}/{group}/{key}
          method: delete

  varPatch:
    handler: src/var.varPatch
    events: 
      - http:
          cors: true
          path: var/{isSecret}/{group}/{key}
          method: patch

  resourceUpload:
    handler: src/resource.upload
    events:
      - http:
          cors: true
          path: resource
          method: post
  
  resourceList:
    handler: src/resource.resourceList
    events:
      - http:
          cors: true
          path: resource
          method: get
  
  resourceDelete:
    handler: src/resource.delete
    events:
      - http:
          cors: true
          path: resource
          method: delete
